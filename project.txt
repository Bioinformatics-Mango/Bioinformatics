#!/bin/bash
#enter into the working directory
for wd in "$1"; do echo "$wd";done

#go into the working directory
cd "$wd"

#Read all the input bam files created by tophat, create a cufflink folder and run the cufflink
shopt -s globstar; for i in txdout/tophat/**/accepted_hits_*.bam; do echo "$i"; mkdir -p "${i%_thout*}""_clout"; cufflinks -p 8 -o "${i%_thout*}""_clout" -G ref_genome/genes.gtf -g ref_genome/genes.gtf -b ref_genome/genome.fa -u "$i"; done

#create a cufflink folder to save all the outputs from cufflink in this folder
shopt -s globstar; mkdir -p txdout/cufflink; for i in txdout/tophat/**/*_clout; do mv "$i" txdout/cufflink; done

#create a file with paths to all the transcripts.gtf file
shopt -s globstar; for i in txdout/cufflink/*_clout/transcripts.gtf; do echo "$i"; mkdir -p "${i%cufflink*}""cuffmerge"; touch "${i%cufflink*}""cuffmerge""/assemblies.txt"; echo -e "$i\n" >> txdout/cuffmerge/assemblies.txt; done

#run cuffemrge on the file
cuffmerge -g ref_genome/genes.gtf -s ref_genome/genome.fa -p 8 txdout/cuffmerge/assemblies.txt

#move the merged_asm folder to cuffmerge
shopt -s globstar; mv merged_asm txdout/cuffmerge

#sort the bam file and create an index file for all the bam files generated in tophat
shopt -s globstar; for i in txdout/tophat/**/accepted_hits_*.bam; do echo $i; samtools index $i; done #samtools sort "$i" "${i%.bam}""_sorted"; samtools index $i; done

#generate a statistics report on all the bam files for the number of reads mapped in each chromosome
shopt -s globstar; for i in txdout/tophat/**/accepted_hits_*.bam; do echo $i; for j in "${i#*accepted_hits_}"; do for k in "${j%.bam*}"; do echo "@""$k" >> txdout/tophat/tophat_statistics.txt; samtools idxstats $i >> txdout/tophat/tophat_statistics.txt; done; done; done

#create a cuffcompare folder
shopt -s globstar; mkdir -p txdout/cuffcompare; mv cuffcmp.stats cuffcmp.tracking cuffcmp.combined.gtf cuffcmp.loci txdout/cuffcompare

#Do cuffcompare to generate the genes and transcripts that differ from the reference
cuffcompare -i txdout/cuffmerge/assemblies.txt -r ref_genome/genes.gtf

#print a file that shows the statistics generated by cuffcompare in a readable way
shopt -s globstar; for i in txdout/**/*.tmap; do for k in "${i#*cufflink/}"; do for l in "${k%_clout*}"; do echo -e "@""\t$l" >> txdout/cuffcompare/cuffcmp_statistics.txt; awk 'NR > 1 { s[$3]++ } END { for (j in s) { printf ("%s\t%d\n",j,s[j]) >> "txdout/cuffcompare/cuffcmp_statistics.txt" }}' $i; done; done; done

#join the different rows with same column name
awk -F'\t' -v OFS='\t' '{x=$1;$1="";a[x]=a[x]$0}END{for(x in a)print x,a[x]}' txdout/cuffcompare/cuffcmp_statistics.txt > txdout/cuffcompare/cuffcmp_statistics_final.txt; rm txdout/cuffcompare/cuffcmp_statistics.txt; sort txdout/cuffcompare/cuffcmp_statistics_final.txt > txdout/cuffcompare/cuffcmp_statistics.txt; rm txdout/cuffcompare/cuffcmp_statistics_final.txt

#using sed replace the class codes in cuffcmp_statistics file into a readable form
#shopt -s globstar; for i in txdout/cuffcompare/cuffcmp_statistics.txt; do echo "\n\nLegend: s:Complete match of intron chain\nc:Contained\nj:Potential novel isoform\ne:Overlap with a reference exon and atleast 10bp of intron\ni:A transfrag falling entirely within a reference intron\no:Generic exonic overlap\np:Possible polymerase run on fragment\nr:Repeat\nu:Unknown,intergenic transcript\nx:Exonic overlap with reference on the opposite strand\ns:Overlap with reference intron on the oppsotie strand" >> txdout/cuffcompare/cuffcmp_statistics.txt; done

#Using picard mark duplciates in the bam files
#shopt -s globstar; for i in txdout/tophat/**/accepted_hits_*.bam; do java -Xmx2g -jar picard-tools-1.108/MarkDuplicates.jar INPUT="$i" OUTPUT="${i%.bam}""_WoDuplicates.bam" METRICS_FILE="${i%.bam}"".metrics" PROGRAM_RECORD_ID=null PROGRAM_GROUP_NAME=null REMOVE_DUPLICATES=true ASSUME_SORTED=true VALIDATION_STRINGENCY=LENIENT CREATE_INDEX=true; done

#sort the bam file according to name
shopt -s globstar; for i in txdout/tophat/**/accepted_hits_*.bam; do echo "$i"; samtools sort -n "$i" "${i%.bam*}""_sorted"; done

#convert the sorted bam to sam file
shopt -s globstar; for i in txdout/tophat/**/accepted_hits_*_sorted.bam; do echo $i; samtools view -h "$i" -o "${i%.bam*}"".sam"; done

#Count the reads using HTseq
shopt -s globstar; mkdir -p txdout/HTseq; for i in txdout/tophat/**/accepted_hits_*_sorted.sam; do echo "$i"; for j in "${i#*accepted_hits_}"; do for k in "${j%_sorted.sam}"; do mkdir -p txdout/HTseq/"$k"; touch txdout/HTseq/"$k"/HTseq_counts.txt; python -m HTSeq.scripts.count -m intersection-strict -s no -t exon -i gene_id "$i" ref_genome/genes.gtf > txdout/HTseq/"$k"/HTseq_counts.txt; done; done; done

#join the various text files into one with the count data
join -t $'\t' txdout/HTseq/batchr1/HTseq_counts.txt txdout/HTseq/batchr2/HTseq_counts.txt | join -t $'\t' - txdout/HTseq/batchr3/HTseq_counts.txt | join -t $'\t' - txdout/HTseq/chemostatr1/HTseq_counts.txt | join -t $'\t' - txdout/HTseq/chemostatr2/HTseq_counts.txt | join -t $'\t' - txdout/HTseq/chemostatr3/HTseq_counts.txt > txdout/HTseq/HTseq_final.txt

#use sed to include a tab at the end of each line
sed -i 's/$/\t/' txdout/HTseq/HTseq_final.txt
