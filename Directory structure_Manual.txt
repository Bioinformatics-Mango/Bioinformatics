Working Directory and Contents
==============================
Overview:
=========
-Root
   Pipeline python script, facultative scripts
   -ref_genome
   -raw_fastq
   -fastqc_out
      -before_trimming
         -paired_<condition><replicate>_<1|2>
            -paired_<condition><replicate>_<1|2>_fastqc
               Quality reports
         -unpaired_<condition><replicate>_<1|2>
            -unpaired_<condition><replicate>_<1|2>_fastqc
               Quality reports
      -after_trimming
          ...
   -trimmed_fastq
      Trimmed files
   -txdout
      -tophat
         -<condition><replicate>_<1|2>_thout
            Accepted_hits.bam files and Intermediate files

      -cufflinks
      -cuffmerge
      -cuffdiff

Details
=======
-Root
This is the working directory. The user inputs (a) a folder containing the sequence reads (in fastq format) for the analysis and (b) a .txt file with the new filenames that define the names of the quality controlled fastq files generated by the pipeline, (c) a folder containing all the reference annotations of the genome (see ref_genome directory below). After calling the pipeline script the different subdirectories are automatically created.

Contents: Mango.py -> Python script for running the pipeline.
	  Cuff.sh -> Bash script for running cufflinks and cuffmerge and statistical reports of the output.
	  Trimommatic v0.32 -> The software used for the quality analysis of the raw fastq input files.
	  volcano.R -> R script for creating volcano plots of the data generated in the pipeline.
		  
	-ref_genome
	This folder must contain the following files (provided by the user):
		genome.fa -> A fasta file of the organism's genome sequence.
		genome.fa.fai -> An index file corresponding to the genome.fa file of the genome.
		genome.*.bt2 -> All the bowtie2 index files of the genome being analyzed. 
				For a more detailed description of what these files are and how they can be obtained please visit the bowtie2 manual 							page (http://bowtie-bio.sourceforge.net/manual.shtml).
	
	-raw_fastq	
	Contents: The fastq files of sequence reads provided by the user. Should contain an even number of files corresponding pairwise to the paired-end reads for 		each replicate/condition. The format of the names should be <filename1>_1.fastq and <filename1>_2.fastq, with filename1 being the same for each 	replicate/condition.
	
	-fastqc_out
	This folder is created after the sequence reads quality control is done. It contains subfolders with the quality control for each paired-reads file before and 		after trimming. The layout of these folders is shown below:
		
		-after_trimming
			-<paired_condition_1>
			-<paired_condition_2>
			-<unpaired_condtion_1>
			-<unpaired_condition_2>
				...

		-before_trimming
			-<paired_condition_1>
			-<paired_condition_2>
			-<unpaired_condtion_1>
			-<unpaired_condition_2>
				...	
					Each folder contains fastqc quality reports for each of the individual paired-end reads file and for the remaining unpaired, 						resulted from the quality control with Trimmomatic.
		
	-trimmed_fastq
	This folder is created after the reads quality analysis is run.
	Contents: The fastq files with improved quality that will be used for further analysis.

	-txdout
	This folder is created at the beginning of the analysis.
	Contents: For each of the subsequent steps of the analysis a folder is created containing its corresponding output.
	NOTE: For a more detailed description of the output of each part of the pipeline please see the corresponding manual part.

		-tophat
		The results of the read mapping are stored here. For the different conditions and their replicates the results are stored into different folders of the 		layout:
			-<condition[replicate]_thout>
			This file contains a number of intermediate files produced during the mapping of the reads. The TopHat part of the pipeline first maps the kept 			paired reads from the quality control. Then it maps the remaining unpaired reads and uses the resulting output of both, to merge them in one 				bam file with samtools. This .bam file is then used for further downstream analysis. 
			Contents: accepted_hits_condition[replicate].bam -> The bam file resulting after the merge with samtools of the bam files produced after 									    	    mapping the paired and the unpaired reads.
				   
				  accepted_hits.bam -> The bam file produced from mapping the paired reads
				 -unpaired_condition[replicate]_1 -> Contains the results after mapping the forward part of the unpaired reads.
				 -unpaired_condition[replicate]_2 -> Contains the results after mapping the reverse part of the unpaired reads.
				  
				 -logs
				  unmapped.bam
				  insertions.bed	
			          align_summary.txt				  
				  deletions.bed
			          junctions.bed
				  prep_reads.info
				 			

		-cufflinks
		
		-cuffmerge

		-cuffdiff
		